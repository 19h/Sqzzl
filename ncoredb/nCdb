<?php
        /*
         *      (c) The nCoreDB Algorithm. By Kenan Sulayman. All rights reserved.
         *      (c) The nCoreDB Implementation. By Kenan Sulayman. All rights reserved.
         */
        
        // Control-instance. A wrapper has been implemented, so it should be used.
        defined( "Interfaced" ) or die( "Wrapper is not registered." );
        defined( "wAuth" ) or die( "Wrapper is not registered." );
        $g = get_included_files(  );
        if ( !in_array( wAuth, $g ) )
                exit( "Fault." );
        
        // there is no suffix.
        if ( strstr( $q = basename( __FILE__ ), "." ) || $q != "nCdb" )
                die( "This file must is named nCdb. No dots, no change of name." );
        
        // check integrity
        //if ( class_exists("nCdb") )
        //die( "Must not redeclare nCdb class." );
        
        // Crypto classes
        class xorCrypt {
                private $password = null;
                
                public function set_key( $password ) {
                        $this->password = $password;
                }
                
                private function get_rnd_iv( $iv_len ) {
                        $iv = '';
                        while ( $iv_len-- > 0 ) {
                                $iv .= chr( mt_rand(  ) & 0xff );
                        }
                        return $iv;
                }
                
                public function encrypt( $plain_text, $iv_len = 16 ) {
                        $plain_text .= "\x13";
                        $n = strlen( $plain_text );
                        if ( $n % 16 ) {
                                $plaixt .= str_repeat( "\0", 16 - ( $n % 16 ) );
                                $i = 0;
                                $enc_text = $this->get_rnd_iv( $iv_len );
                                $iv = substr( $this->password ^ $enc_text, 0, 512 );
                                while ( $i < $n ) {
                                        $block = substr( $plain_text, $i, 16 ) ^ pack( 'H*', sha1( $iv ) );
                                        $enc_text .= $block;
                                        $iv = substr( $block . $iv, 0, 512 ) ^ $this->password;
                                        $i += 16;
                                }
                                return base64_encode( $enc_text );
                        } else;
                }
                
                public function decrypt( $enc_text, $iv_len = 16 ) {
                        $enc_text = base64_decode( $enc_text );
                        $n = strlen( $enc_text );
                        $i = $iv_len;
                        $plain_text = '';
                        $iv = substr( $this->password ^ substr( $enc_text, 0, $iv_len ), 0, 512 );
                        while ( $i < $n ) {
                                $block = substr( $enc_text, $i, 16 );
                                $plain_text .= $block ^ pack( 'H*', sha1( $iv ) );
                                $iv = substr( $block . $iv, 0, 512 ) ^ $this->password;
                                $i += 16;
                        }
                        return stripslashes( preg_replace( '/\\x13\\x00*$/', '', $plain_text ) );
                }
        }
        //
        //$xorCrypt = new xorCrypt(  );
        //$xorCrypt->set_key( "Your Secret Key" );
        //
        //$text = "hello world!";
        //$encrypted = $xorCrypt->encrypt( $text, 32 );
        
        //echo $encrypted;
        //print "\r\n";
        //echo $xorCrypt->decrypt( $encrypted, 32 );
        
        final class nCdb {
                private $cache = array();
                
                public function __exists( $db ) {
                        if ( file_exists( $db ) )
                                if ( file_exists( $db . "/_v" ) )
                                        return true;
                                else
                                        return false;
                        else
                                return false;
                }
                
                public function __create( $db, $w_data = false, $keys = array(  ), $use_uns = true ) { //pecific narrowing
                        if ( $db != "" || $db == null || $db == 0 )
                                if ( $this->__exists( $db ) )
                                        return false;
                                else;
                        else
                                return false;
                        if ( !isset( $use_uns ) )
                                $use_uns = true;
                        else if ( !is_bool ( $use_uns ) )
                                $use_uns = true;
                        else if ( $use_uns == false )
                                if ( count( $w_data) != $keys ) // kinda strict, but hgaf. Maybe on_fail enforce $use_uns = true? better !fail! on FuCK.
                                        return false;
                        if ( $w_data != false ) {
                                if ( !is_array( $w_data ) )
                                        return false;
                                if ( count( $w_data ) <= 0 )
                                        $sk = true;
                                $t = true;
                        } elseif ( $w_data == false || $sk == true )
                                $t = false;
                        if ( file_exists( $db ) ?  : mkdir( $db ) ) {
                                $d = substr( __FILE__, 0, strlen( __FILE__ ) - strlen( basename( __FILE__ ) ) );
                                chdir( $db );
                                @file_put_contents( "_v", serialize( array( microtime(true) /*ctime*/, array() /*for the logs*/ ) ));
                                if ( $t ) {
                                        for ( $x = 0, $z = count( $y ), $y = $this->__tokenize( $w_data ); $x <= $z + 1; ++$x ){
                                                // Tier C ARR, head routes
                                                if ( mkdir( join( "/", $y[ $x ] ), 0777, 1 ) )
                                                        if ( $use_uns )
                                                                if ( file_put_contents ( join( "/", $y[ $x ] ) . "/" . "__db", serialize( array_merge( $keys, array ( "ctime" => microtime(true), "atime" => microtime(true) ) ) ) ) )
                                                                        continue;
                                                                else
                                                                        break; // wtf?
                                                        else
                                                                if ( file_put_contents ( join( "/", $y[ $x ] ) . "/" . "__db", serialize ( array_merge( $keys[ $x ], array ( "ctime" => microtime(true), "atime" => microtime(true) ) ) ) ) )
                                                                        continue;
                                                                else
                                                                        break;
                                        }
                                        //for ( $$x=0,$$z=count($y[$x]);$$x<=$$z;++$$x )
                                        //        if ( file_exists($y[$x][$$x]) )
                                        //                chdir ($y[$x][$$x]);
                                        //        else
                                        //                if ( @mkdir($y[$x][$$x]) )
                                        //                        chdir($y[$x][$$x]);
                                        //                else
                                        //                        return false;( ( is_array( $keys ) ) ? 1 : $keys = array(  ) );
                                        @file_put_contents( "__db", serialize( $keys ) );
                                        chdir( $d );
                                } else { // there're no indices, so what is about the $keys? If element is empty, $e = $keys.
                                        chdir( $d );
                                }
                        } else {
                                return false;
                        }
                }
                
                public function __update ( $db, $index, $keys ) { // TODO! Check for $d,i,k VALID! Refer to handling!
                        //print serialize(/*implode( "/", */$this->__tokenize($index)/* )*/);
                        if ( $this -> __exists ( $db ) and $p = $this->__tokenize(array($index)) )
                                if ( @file_exists( $p = "$db/" . implode ( "/", $p[0] ) . "/__db" ) )
                                        if ( $q = unserialize( file_get_contents( $p ) ) ){ // $sure? wgaf!
                                                $q = array_merge( $q, $keys ); file_put_contents( $p, serialize( $q ) );
                                        } else    return false;
                                else    return false;
                        else    return false;
                }
                
                public function __read ( $db, $index, $keys = false ) { // $keys == false else output filtered.
                        if ( $this->__exists ( $db ) );
                }
                
                public function __ressource ( $db ) { // create a new ressource
                        if ( !isset($this->cache[$q = sha1($db)]) )
                                $this->cache [ sha1($db) ] = $db;
                        else    return $this->cache[ $q ];
                }
                
                private function __tokenize( $q, $s = 2 ) {
                        for ( $i = 0, $z = count( $q ), $y = array(  ); $i <= $z - 1; ++$i ) {
                                $o = strlen( $q[ $i ] = str_replace( chr( 32 ), "", $q[ $i ] ) );
                                if ( ( $w = $o % $s ) == 0 )
                                        ( --$o );
                                else
                                        ( $o -= $w ); /* ($o-$w)/$s */
                                for ( $x = 0; $x <= $o; $x += $s ) // hardcode for speed, += != speed :: ++x * k! - TODO
                                        if ( !( $x > $o ) )
                                                $y[ $i ][  ] = substr( $q[ $i ], $x, $s );
                        }
                        return $y;
                }
        }
        $x = new nCdb;
        // TEST

        $xorCrypt = new xorCrypt(); $xorCrypt->set_key( mt_rand() . md5(mt_rand()) );$n=$xorCrypt->encrypt( mt_rand(), 32 ); $n = md5($n);
        
        print "Creating '$n': "; $x->__create($n,array("KenanSulayman","TarikSulayman"),array("Auth"=>array(),"info"=>array())); print "done.\r\n";
        print "Modifying '$n': "; $x->__update($n,"KenanSulayman",array("junk"=>"funk")); print "done.";