<?php
        /*
         *      (c) The nCoreDB Algorithm. By Kenan Sulayman. All rights reserved.
         *      (c) The nCoreDB Implementation. By Kenan Sulayman. All rights reserved.
         */
        
        // Control-instance. A wrapper has been implemented, so it should be used.
        defined( "Interfaced" ) or die( "Wrapper is not registered." );
        defined( "wAuth" ) or die( "Wrapper is not used." );
        $g = get_included_files(  );
        if ( !in_array( wAuth, $g ) )
                exit( "Fault." );
        
        // there is no suffix.
        if ( strstr( $q = basename( __FILE__ ), "." ) || $q != "nCdb" )
                die( "This file must is named nCdb. No dots, no change of name." );
        
        // check integrity
        //if ( class_exists("nCdb") )
        //die( "Must not redeclare nCdb class." );
        
        // Crypto classes
        class xorCrypt {
                private $password = null;
                
                public function set_key( $password ) {
                        $this->password = $password;
                }
                
                private function get_rnd_iv( $iv_len ) {
                        $iv = '';
                        while ( $iv_len-- > 0 ) {
                                $iv .= chr( mt_rand(  ) & 0xff );
                        }
                        return $iv;
                }
                
                public function encrypt( $plain_text, $iv_len = 16 ) {
                        $plain_text .= "\x13";
                        $n = strlen( $plain_text );
                        if ( $n % 16 ) {
                                $plain_text .= str_repeat( "\0", 16 - ( $n % 16 ) );
                                $i = 0;
                                $enc_text = $this->get_rnd_iv( $iv_len );
                                $iv = substr( $this->password ^ $enc_text, 0, 512 );
                                while ( $i < $n ) {
                                        $block = substr( $plain_text, $i, 16 ) ^ pack( 'H*', sha1( $iv ) );
                                        $enc_text .= $block;
                                        $iv = substr( $block . $iv, 0, 512 ) ^ $this->password;
                                        $i += 16;
                                }
                                return base64_encode( $enc_text );
                        } else {
                        }
                }
                
                public function decrypt( $enc_text, $iv_len = 16 ) {
                        $enc_text = base64_decode( $enc_text );
                        $n = strlen( $enc_text );
                        $i = $iv_len;
                        $plain_text = '';
                        $iv = substr( $this->password ^ substr( $enc_text, 0, $iv_len ), 0, 512 );
                        while ( $i < $n ) {
                                $block = substr( $enc_text, $i, 16 );
                                $plain_text .= $block ^ pack( 'H*', sha1( $iv ) );
                                $iv = substr( $block . $iv, 0, 512 ) ^ $this->password;
                                $i += 16;
                        }
                        return stripslashes( preg_replace( '/\\x13\\x00*$/', '', $plain_text ) );
                }
        }
        
        $xorCrypt = new xorCrypt(  );
        $xorCrypt->set_key( "Your Secret Key" );
        
        $text = "hello world!";
        $encrypted = $xorCrypt->encrypt( $text, 32 );
        
        echo $encrypted;
        print "\r\n";
        echo $xorCrypt->decrypt( $encrypted, 32 );
        
        final class nCdb {
                public function __exists( $db ) {
                        if ( file_exists( $db ) )
                                if ( file_exists( $db . "/_v" ) )
                                        return true;
                                else
                                        return false;
                        else
                                return false;
                }
                
                public function __create( $db, $w_data = false, $keys = array() ) {
                        if ( $db != "" || $db == null || $db == 0 )
                                if ( $this->__exists( $db ) )
                                        return false;
                                else;
                        else
                                return false;
                        if ( $w_data != false ) {
                                if ( !is_array( $w_data ) )
                                        return false;
                                if ( count( $w_data ) <= 0 )
                                        $sk = true;
                                $t = true;
                        } elseif ( $w_data == false || $sk == true )
                                $t = false;
                        if ( file_exists($db) ?: mkdir( $db ) ) {
                                $d = substr(__FILE__,0,strlen(__FILE__)-strlen(basename(__FILE__))); chdir( $db );
                                @file_put_contents( "_v", "<//1//>" );
                                if( $t ) {
                                        for ( $x=0,$z=count($y),$y=$this->__tokenize ( $w_data );$x<=$z+1;++$x ) {// Tier C ARR, head routes
                                                mkdir(join("/",$y[$x]),0777,1);
                                                //for ( $$x=0,$$z=count($y[$x]);$$x<=$$z;++$$x )
                                                //        if ( file_exists($y[$x][$$x]) )
                                                //                chdir ($y[$x][$$x]);
                                                //        else
                                                //                if ( @mkdir($y[$x][$$x]) )
                                                //                        chdir($y[$x][$$x]);
                                                //                else
                                                //                        return false;
                                        }
                                        ((is_array($keys))?1:$keys=array()); @file_put_contents("__db",serialize($keys));
                                        chdir($d);
                                } else {
                                        $nb = array(array($db,microtime(1)),array());
                                }
                        } else {
                                return false;
                        }
                }
                
                private function __tokenize ( $q, $s=2 ) {
                        for ( $i=0,$z=count($q),$y=array();$i<=$z-1;++$i) {
                                $o=strlen($q[$i]=str_replace(chr(32),"",$q[$i]));
                                if(($w=$o%$s)==0)(--$o);else($o-=$w); /* ($o-$w)/$s */
                                for( $x=0;$x<=$o; $x+=$s ){ // hardcode for speed, += != speed :: ++x * k! - TODO
                                        if ( !($x > $o) )
                                                $y[$i][] = substr($q[$i], $x, $s);
                                }
                        }
                        return $y;
                }
        }
        $x = new nCdb;
        $x->__create("qubit",array("KenanSulayman","TarikSulayman"),array("Auth"=>array(),"info"=>array()));
        //sleep(5);
        //foreach(glob("qubit/*")as$k)if(!is_dir($k))unlink($k);else(rmdir($k));rmdir("qubit");
?>